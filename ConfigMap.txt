
*************************************************************************************************************************************************
.
. Demo: ConfigMaps  |  Srinath Challa
.
*************************************************************************************************************************************************

Overview:
---------
1. Creating Configmap from "multiple files" & Consuming it inside Pod from "volumes" 

   1a. Create Configmap "nginx-configmap-vol" from "multiple files"
   1b. Consume "nginx-configmap-vol" configmap inside Pod from "volumes" 
   1c. Create | Display | Validate

2. Creating Configmap from "literal values" & Consuming it inside Pod from "environment variables" 

   2a. Create configmap “redis-configmap-env” from "literal values"
   2b. Consume “redis-configmap-env” configmap inside pod from “Environment Variables” inside pod
   2c. Create | Display | Validate

3. Cleanup

   3a. Delete configmaps
   3b. Delete pods
   3c. Validate

*************************************************************************************************************************************************

1. Creating Configmap from "multiple files" & Consuming it inside Pod from "volumes" 


1a.  Create Configmap "nginx-configmap-vol" from "multiple files":
------------------------------------------------------------------
echo -n 'Non-sensitive data inside file-1' > file-1.txt
echo -n 'Non-sensitive data inside file-2' > file-2.txt

kubectl create configmap nginx-configmap-vol --from-file=file-1.txt --from-file=file-2.txt
# rm -f file-1 file-2

kubectl get configmaps
kubectl describe configmaps nginx-configmap-vol

==========================================================

1b.  Consume above "nginx-configmap-vol" configmap inside Pod from "volumes" , volumes section will create a volume test-vol having path /etc/non-sensitive-data and copies
 files file-1.txt as file-a.txt and file-2.txt as fileb.txt inside new pod which we will create using below menifest file
------------------------------------------------------------------------------------------------------------------------- 

#nginx-pod-configmap-vol.yaml
apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod-configmap-vol
spec:
  containers:
  - name: nginx-container
    image: nginx
    volumeMounts:
    - name: test-vol
      mountPath: "/etc/non-sensitive-data"
      readOnly: true
  volumes:
    - name: test-vol
      configMap:
        name: nginx-configmap-vol
        items:
        - key: file-1.txt
          path: file-a.txt
        - key: file-2.txt
          path: file-b.txt



==========================================================

1c. Create | Display | Validate:
--------------------------------

# Create
kubectl create -f nginx-pod-configmap-vol.yaml

# Display
kubectl get po
kubectl get configmaps
kubectl describe pod nginx-pod-configmap-vol

# Validate from "inside" the pod, login to pod and check your volume is created and files are copied to it.
kubectl exec nginx-pod-configmap-vol -it /bin/sh
cd /etc/non-sensitive-data
ls 
cat Non-sensitive data inside file-1.txt
cat password.txt
exit

(OR)

# Validate from "outside" the pod
kubectl exec nginx-pod-configmap-vol ls /etc/non-sensitive-data
kubectl exec nginx-pod-configmap-vol cat /etc/non-sensitive-data/file-a.txt
kubectl exec nginx-pod-configmap-vol cat /etc/non-sensitive-data/file-b.txt


*************************************************************************************************************************************************

2. Creating Configmap from "literal values" & Consuming it inside Pod from "environment variables"  

In section 1 we have created mount point inside pod and copied two files to it. IN this section we will create 2 environment variable for our pod named as file.1 and file.2 and assigned value to them 
as file.a and file.b.   we can also give ORACLE_HOME=/orahome/12.1.0/oracle_home.


2a.  Create configmap “redis-configmap-env” from "literal values"
-----------------------------------------------------------------

kubectl create configmap redis-configmap-env --from-literal=file.1=file.a --from-literal=file.2=file.b

kubectl get configmap
kubectl describe configmap redis-configmap-env

===============================================================================

2b. Consume “redis-configmap-env” configmap inside pod from “Environment Variables” inside pod
-----------------------------------------------------------------------------------------------

# redis-pod-configmap-env.yaml
apiVersion: v1
kind: Pod
metadata:
  name: redis-pod-configmap-env
spec:
  containers:
  - name: redis-container
    image: redis
    env:
      - name: FILE_1
        valueFrom:
          configMapKeyRef:
            name: redis-configmap-env
            key: file.1
      - name: FILE_2
        valueFrom:
          configMapKeyRef:
            name: redis-configmap-env
            key: file.2
  restartPolicy: Never

===============================================================================

2c. Create | Display | Validate:

# Create
kubectl create -f  redis-pod-configmap-env.yaml

# Display
kubectl get pods
kubectl get configmaps
kubectl describe pod redis-pod-configmap-env


# Validate from "inside" the pod
kubectl exec redis-pod-configmap-env -it /bin/sh
env | grep  FILE
exit

(OR)

# Validate from "outside" the pod
kubectl exec redis-pod-configmap-env env | grep FILE


*************************************************************************************************************************************************

3. Cleanup

# Delete configmaps
kubectl delete configmaps nginx-configmap-vol redis-configmap-env

# Delete pods
kubectl delete pods nginx-pod-configmap-vol redis-pod-configmap-env

# Validate
kubectl get pods
kubectl get configmaps


*************************************************************************************************************************************************

 